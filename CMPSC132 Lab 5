class LinkedList:
    def __init__(self):
        self.__head = None
        self.__tail = None
        self.__size = 0

    def getFirst(self):
        if self.__size == 0:
            return None
        else:
            return self.__head.element

    def getLast(self):
        if self.__size == 0:
            return None
        else:
            return self.__head.element

    def addFirst(self, e):
        newNode = Node(e)
        newNode.next = self.__head
        self.__head = newNode
        self.__size += 1

        if self.__tail == None:
            self.__tail = self.__head

    def addLast(self, e):
        newNode = Node(e)

        if self.__tail == None:
            self.__head = self.__tail = newNode
        else:
            self.__tail.next = newNode
            self.__tail = self.__tail.next
        self.__size += 1

    def add(self, e):
        self.addLast(e)

    def insert(self, index, e):
        if index == 0:
            self.addFirst(e)
        elif index >= self.__size:
            self.addLast(e)
        else:
            current = self.__head
            for i in range(1, index):
                current = current.next
            temp = current.next
            current.next = Node(e)
            (current.next).next = temp
            self.__size += 1

    def removeFirst(self):
        if self.__size == 0:
            return None
        else:
            temp = self.__head
            self.__head = self.__head.next
            self.__size -= 1
            if self.__head == None:
                self.__tail = None
            return temp.element

    def removeLast(self):
        if self.__size == 0:
            return None
        elif self.__size == 1:
            temp = self.__head
            self.__head = self.__tail = None
            self.__size = 0
            return temp.element
        else:
            current = self.__head

            for i in range(self.__size - 2):
                current = current.next
            temp = self.__tail
            self.__tail = current
            self.__tail.next = None
            self.__size -= 1
            return temp.element

    def removeAt(self, index):
        if index < 0 or index >= self.__size:
            return None
        elif index == 0:
            return self.removeFirst()
        elif index == self.__size - 1:
            return self.removeLast()
        else:
            previous = self.__head

            for i in range(1, index):
                previous = previous.next
            current = previous.next
            previous.next = current.next
            self.__size -= 1
            return current.element

    def isEmpty(self):
        return self.__size == 0

    def getSize(self):
        return self.__size

    def __str__(self):
        result = "["

        current = self.__head
        for i in range(self.__size):
            result += str(current.element)
            current = current.next
            if current != None:
                result += ",  "
            else:
                result += "]"
        return result

    def clear(self):
        self.__head = self.__tail = None

    def contains(self, e):

        return True

    def remove(self, e):
        print("Implementation left as an exercise")
        return True

    def get(self, index):
        current = self.__head
        for i in range(0, index):
            current = current.next
        return current.element

    def indexOf(self, exit):
        print("Implementation left as an exercise")
        return 0

    def lastIndexof(self, e):
        print("Implementation left as an exercise")
        return 0

    def set(self, index, e):
        print("Implementation left as an exercise")
        return None

    def __getitem__(self, index):
        return self.get(index)

    def __iter__(self):
        return LinkedListIterator(self.__head)


class Node:
    def __init__(self, e):
        self.element = e
        self.next = None


class LinkedListIterator:
    def __init__(self, head):
        self.current = head

    def __next__(self):
        if self.current == None:
            raise StopIteration
        else:
            element = self.current.element
            self.current = self.current.next
            return element


file = open("song_list.txt", "r")
x = file.readline()

y = x.split(",")
songList = LinkedList()
while True:
    #print("x")
    l = file.readline()
    song_info = l.split(",")
    if l == (""):
        break
    #print(song_info)
    songnode = Node(l)
    songList.add(song_info)

menu = '''
A: Play All
B: Add a song
C: Delete a song
D: Start playing from a song
E: Exit
'''
print(menu)
option = input("Enter the option: ")
if option.upper() == "A":

    for i in ran1ge(0, 9):

        print(songList.get(i))
    print(menu)

if option.upper() == "B":
    last = input("Enter the song in this format: Song,Artist,Year")
    songList.addLast
    print("Song added")
    print(menu)

if option.upper() == "C":
    delete = input("Enter the name of the song: ")
    for i in range(0, 9):
        songData = songList.get(i)
        #print(songData[0])
        #print(songData)
        if delete == songData[0]:
            songList.removeAt(i)
            print(songList)
            break

if option.upper() == "D":
    start = input("Enter the song to start: ")
    k = 0
    for i in range(0, 9):
        songData = songList.get(i)
        if start == songData[0]:
            k = i

    for i in range(k, 9):
        print(songList.get(i))

if option.upper() == "E":
    exit()
